<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="incident">priority=1^EQ<item endquery="false" field="priority" goto="false" newquery="false" operator="=" or="false" value="1"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Slack Integration</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var json = new global.JSON();
	gs.info(gs.getProperty('x_12684_slack_app.task_tables_list').split(',').indexOf(current.getTableName()));
	//gs.info(current.getTableName());
/*	if(current.incident_state == 1 && current.x_12684_slack_app_slack_channel_id.nil()){
		gs.info('Slack Integration::BR::Slack Integration Create Channell::called');
		try {
			var r = new sn_ws.RESTMessageV2('x_12684_slack_app.Slack Web API', 'Create private channel');
			r.setQueryParameter('name',current.number.getDisplayValue());
			r.setQueryParameter('token', gs.getProperty('x_12684_slack_app.authentication_token'));
			var response = r.execute();
			gs.debug('Slack Integration::BR::Slack Integration Create Channell::'+r.getEndpoint());
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();
			var respBodyObj = json.decode(responseBody);
			gs.info('slack Integration::BR::group id::'+respBodyObj.group.id);
			if(respBodyObj.group.id){
				var gr = new GlideRecord('x_12684_slack_app_slack_related_records');
				gr.addQuery('u_task',current.sys_id);
				gr.query();
				if(!gr.hasNext()){
					gr.initialize();
					gr.u_task = current;
					gr.slack_group_id = respBodyObj.group.id;
					gr.update();
					gs.addInfoMessage('Private Slack channel has been created:'+respBodyObj.group.id);
				}
				else{
					gs.addInfoMessage('Private Slack channel exists:'+respBodyObj.group.id);
				}	
			}
			gs.debug('Slack Integration::BR::Slack Integration Create Channell::'+responseBody);
		}
		catch(ex) {
			var message = ex.getMessage();
		}
	}
	if(current.incident_state.changesTo(6)){
		try {
			gs.info('Slack Integration::BR::Incident Resolved::Retreiving channel history;');
			var q = new sn_ws.RESTMessageV2('x_12684_slack_app.Slack Web API', 'Get channel history');
			q.setQueryParameter('channel',current.x_12684_slack_app_slack_channel_id);
			q.setQueryParameter('token', gs.getProperty('x_12684_slack_app.authentication_token'));
			var response3 = q.execute();
			var responseBody3 = json.decode(response3.getBody());
			var httpStatus3 = response3.getStatusCode();
			gs.info('Slack Integration::BR::messages length::'+response3.getBody());
			if(responseBody3.messages.length>0){
				current.work_notes = 'Slack chat history:\n'+responseBody3.messages.join();
				current.update();
			}
			
		}
		catch(ex) {
			var message = ex.getMessage();
		}
		
		try {
			gs.info('Slack Integration::BR::Incident Resolved::Closing private channel');
			var r2 = new sn_ws.RESTMessageV2('x_12684_slack_app.Slack Web API', 'Close a private channel');
			
			//override authentication profile
			//authentication type ='basic'/ 'oauth2'
			//r.setAuthentication(authentication type, profile name);
			r2.setQueryParameter('channel',current.x_12684_slack_app_slack_channel_id);
			r2.setQueryParameter('token', gs.getProperty('x_12684_slack_app.authentication_token'));
			var response2 = r2.execute();
			var responseBody2 = response2.getBody();
			var httpStatus2 = response2.getStatusCode();
			gs.info('Slack Integration::BR::Response2::'+responseBody2);
		}
		catch(ex) {
			var message = ex.getMessage();
		}
	}*/
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-06-08 20:21:05</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>133e52a4db133200378fd450cf9619d1</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>Slack Integration</sys_name>
        <sys_overrides/>
        <sys_package display_value="Slack App" source="x_12684_slack_app">3482f625db8d3200378fd450cf9619a0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Slack App">3482f625db8d3200378fd450cf9619a0</sys_scope>
        <sys_update_name>sys_script_133e52a4db133200378fd450cf9619d1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-06-18 21:57:09</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=133e52a4db133200378fd450cf9619d1"/>
</record_update>
