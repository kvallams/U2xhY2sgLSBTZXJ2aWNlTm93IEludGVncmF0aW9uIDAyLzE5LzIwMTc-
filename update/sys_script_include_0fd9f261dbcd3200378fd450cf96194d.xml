<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_12684_slack_app.SlackAppHelper</api_name>
        <client_callable>false</client_callable>
        <description>Helper class for operations associated with Slack App</description>
        <name>SlackAppHelper</name>
        <script><![CDATA[var SlackAppHelper = Class.create();
SlackAppHelper.prototype = {
	_endpoint:'',
	_snow_user_id:'',
	_snow_user_pass:'',
	json:'',
	initialize: function() {
		this._endpoint = gs.getProperty('glide.servlet.uri')+'api/now/table/';
		this.json = (function(){
		return new global.JSON();
	})();
		try{
			var user_gr = new GlideRecord('sys_user');
			if(user_gr.get('sys_id',gs.getProperty('x_12684_slack_app.SlackUsersys_id'))){
				this._snow_user_id = user_gr.getValue('user_name');
				this._snow_user_pass = user_gr.getValue('user_password');
			}
			else{
				gs.error('SlackAppHelper:: User doesnot exist::UserSysID:'+gs.getProperty('x_12684_slack_app.SlackUsersys_id'));
			}
		}
		catch (ex) {
			gs.error("SlackAppHelper::There was an error retreving user information", ex);
		}
	},
	//function to configure the ServiceNow to interact with Slack app
	configureApp: function(){
		var oauthProviderReqBody = {
			client_id:gs.getProperty('x_12684_slack_app.slack.client.id'),
			type: 'oauth_provider',
			default_grant_type:'authorization_code',
			name:'Slack app test ws',
			client_secret:gs.getProperty('x_12684_slack_app.slack.client.secret'),
			auth_url:gs.getProperty('x_12684_slack_app.AuthorizationURL'),
			token_url:gs.getProperty('x_12684_slack_app.TokenUrl'),
			redirect_url:gs.getProperty('glide.servlet.uri')+'oauth_redirect.do'
		};
		var respOauthProvider = this.json.decode(this._restCaller(this._endpoint+'oauth_entity?sysparam_fields=sys_id','POST',this.json.stringify(oauthProviderReqBody)));
		var oauthScopeReqBody = {
			name:'Slack App scopes',
			oauth_entity:respOauthProvider.result.sys_id,
			oauth_entity_scope:gs.getProperty('x_12684_slack_app.scopes')
		};
		var respOauthScope = this.json.decode(this._restCaller(this._endpoint+'oauth_entity_scope?sysparam_fields=sys_id','POST',this.json.stringify(oauthScopeReqBody)));
		var respOauthEntityProfile =this.json.decode(this._restCaller(this._endpoint+'oauth_entity_profile?sysparm_query=oauth_entity%3D'+respOauthProvider.result.sys_id+'&sysparm_fields=sys_id&sysparm_limit=1','GET',''));
		var oauthEntityProfileScopeReqBody = {
			oauth_entity_profile:respOauthEntityProfile.result[0].sys_id,
			oauth_entity_scope:respOauthScope.result.sys_id
		};
		var respOauthEntityProfileScope = this.json.decode(this._restCaller(this._endpoint+'oauth_entity_profile_scope?sysparam_fields=sys_id','POST',this.json.stringify(oauthEntityProfileScopeReqBody)));
		var restMessageReqBody = {
			name:'Slack App Authorization request',
			rest_endpoint:gs.getProperty('x_12684_slack_app.AuthorizationURL'),
			authentication_type:'oauth2',
			oauth2_profile:respOauthEntityProfile.result[0].sys_id
		};
		var respRestMessage = this.json.decode(this._restCaller(this._endpoint+'sys_rest_message?sysparam_fields=sys_id','POST',restMessageReqBody));
		gs.debug('APP configuration complete');
	},
	//Parse request for table operations
	reqParser: function(reqParams){
		var reqObj={};
			//var endpoint = gs.getProperty('glide.servlet.uri')+'api/now/table/';
			var text =  reqParams.text.toString().trim();
			//check if the operation is match
			if(text.match(/^-(get)\s(INC|CHG|TASK|CHGTASK|RITM)(?:\d)+/g)){
				reqObj.operation = 'get';
				reqObj.ticket = text.match(/(INC|CHG|TASK|CHGTASK|RITM)(?:\d)+/g);
			}
			else if(text.match(/^-help+$/g)){
				reqObj.operation = 'help';
			}
			else if(text.match(/^-(update)\s(INC|CHG|TASK|CHGTASK)(?:\d)+\s(?:((?:\w)+(?:\=)+(?:\w|\s)+)\s)+end$/g)){
				reqObj.operation = 'update';
				reqObj.ticket = text.match(/(INC|CHG|TASK|CHGTASK)(?:\d)+/g).toString();
				reqObj.fieldInfo = text.match(/(?:\w)+=(?:\w|\s)+(?=\s)/g);
			}
			else{
				reqObj.operation = 'error';
			}
			return this._reqHandler(reqObj);
		},
		_reqHandler:function(reqObj){
			var responseBody = {
				text: "",
				attachments: []
			};
			if(reqObj.operation == 'help'){
				responseBody.text = 'ServiceNow command API, Please use below commands for accessing servicenow.';
				responseBody.attachments.push(new this._createObj('"/SNow -help" provide the command API details'));
				responseBody.attachments.push(new this._createObj('"/SNow -get [ticket number]" will retrive ticket info.'));
				responseBody.attachments.push(new this._createObj('"/SNow -update [ticket number] [operation=value] [operation=value] end" operation can be field values such as comment,assign. Command will update the ticket based on the operation'));
				//gs.info(responseBody.attachments.length);
			}
			// get operation to get ticket informantion
			if(reqObj.operation == 'get'){
				
				try{
					var ticketInfo = this.json.decode(this._restCaller(this._endpoint+'task?sysparm_query=number%3D'+reqObj.ticket+'&sysparm_display_value=true&sysparm_exclude_reference_link=true&sysparm_fields=number%2Copened_by%2Cstate%2Ccmdb_ci%2Cshort_description%2Cdescription%2Cassigned_to&sysparm_limit=1','GET',''));
					responseBody.text = 'Details of Ticket: '+reqObj.ticket;
					for(var key in ticketInfo.result[0]){
						responseBody.attachments.push(new this._createObj(key+': '+ticketInfo.result[0][key]));
					}
					gs.debug('SlackAppHelper::'+this._printObj(ticketInfo));
				}
				catch (ex) {
					responseBody.attachments.push(new this._createObj('Error'+': '+'Oops! something went wrong, Please contact ServiceNow admins'));
					gs.error("SlackAppHelper::There was an error retreving ticket information", ex);
				}
			}
			// update operation to update ticket
			gs.info('SlackAppHelper::incide update operation'+reqObj.operation);
			if(reqObj.operation == 'update'){
				gs.info('SlackAppHelper::incide update operation');
				var ticket_sys_id;
				try{
					ticket_sys_id = this.json.decode(this._restCaller(this._endpoint+'task?sysparm_query=number%3D'+reqObj.ticket+'&sysparm_display_value=true&sysparm_exclude_reference_link=true&sysparm_fields=sys_id&sysparm_limit=1','GET','')).result[0].sys_id;
				}
				catch(ex){
					gs.error("SlackAppHelper::There was an error retreving ticket information", ex);
				}
				gs.info('SlackAppHelper::ticket_sys_id'+ticket_sys_id);
				if(ticket_sys_id){
					gs.info('SlackAppHelper::fieldinfo::'+reqObj.fieldInfo.join());
					var requestBody={};
						for(var i=0;i<reqObj.fieldInfo.length;i++){
							var keyValue = reqObj.fieldInfo[i].split('=');
							gs.info('SlackAppHelper::'+keyValue[0]+'::'+keyValue[1]);
							requestBody[keyValue[0]] = keyValue[1];
						}
						//rest call to update a ticket
						var requestBodyString = this.json.encode(requestBody);
						gs.info('SlackAppHelper::RequestBody::'+requestBodyString);					this._restCaller(this._endpoint+'task/'+ticket_sys_id,'PUT',requestBodyString);
						responseBody.text = 'Details of Ticket: '+reqObj.ticket;
						responseBody.attachments.push(new this._createObj('Ticket has been updated!'));
					}
					else{
						responseBody.attachments.push(new this._createObj('Error'+': '+'Oops! The ticket you have requested to update doesnot exist.'));
						gs.error("SlackAppHelper::There was an error retreving ticket information", ex);
					}
				}
				if(reqObj.operation == 'error'){
					responseBody.attachments.push(new this._createObj('Error'+': '+'Oops! Please check the syntax use -help to check the guide'));
				}
				return responseBody;
				
			},
			createChannel: function(current){
				try {
					var r = new sn_ws.RESTMessageV2('x_12684_slack_app.Slack Web API', 'Create private channel');
					r.setQueryParameter('name',current.number.getDisplayValue());
					r.setQueryParameter('token', gs.getProperty('x_12684_slack_app.authentication_token'));
					var response = r.execute();
					gs.debug('Slack Integration::BR::Slack Integration Create Channell::'+r.getEndpoint());
					var responseBody = response.getBody();
					var httpStatus = response.getStatusCode();
					var respBodyObj = this.json.decode(responseBody);
					gs.info('slack Integration::BR::group id::'+respBodyObj.group.id);
					if(respBodyObj.group.id){
						var gr = new GlideRecord('x_12684_slack_app_slack_related_records');
						gr.addQuery('u_task',current.sys_id);
						gr.query();
						if(!gr.hasNext()){
							gr.initialize();
							gr.u_task = current;
							gr.slack_group_id = respBodyObj.group.id;
							gr.update();
							gs.addInfoMessage('Private Slack channel has been created:'+respBodyObj.group.id);
						}
						else{
							gs.addInfoMessage('Private Slack channel exists:'+respBodyObj.group.id);
						}
					}
					gs.debug('Slack Integration::BR::Slack Integration Create Channell::'+responseBody);
				}
				catch(ex) {
					var message = ex.getMessage();
				}
			},
			closeChannel: function(current){
				try {
					gs.info('Slack Integration::BR::Incident Resolved::Retreiving channel history;');
					var q = new sn_ws.RESTMessageV2('x_12684_slack_app.Slack Web API', 'Get channel history');
					q.setQueryParameter('channel',current.x_12684_slack_app_slack_channel_id);
					q.setQueryParameter('token', gs.getProperty('x_12684_slack_app.authentication_token'));
					var response3 = q.execute();
					var responseBody3 = this.json.decode(response3.getBody());
					var httpStatus3 = response3.getStatusCode();
					gs.info('Slack Integration::BR::messages length::'+response3.getBody());
					if(responseBody3.messages.length>0){
						current.work_notes = 'Slack chat history:\n'+responseBody3.messages.join();
						current.update();
					}
					
				}
				catch(ex) {
					var message = ex.getMessage();
				}
				
				try {
					gs.info('Slack Integration::BR::Incident Resolved::Closing private channel');
					var r2 = new sn_ws.RESTMessageV2('x_12684_slack_app.Slack Web API', 'Close a private channel');
					
					//override authentication profile
					//authentication type ='basic'/ 'oauth2'
					//r.setAuthentication(authentication type, profile name);
					r2.setQueryParameter('channel',current.x_12684_slack_app_slack_channel_id);
					r2.setQueryParameter('token', gs.getProperty('x_12684_slack_app.authentication_token'));
					var response2 = r2.execute();
					var responseBody2 = response2.getBody();
					var httpStatus2 = response2.getStatusCode();
					gs.info('Slack Integration::BR::Response2::'+responseBody2);
				}
				catch(ex) {
					var message = ex.getMessage();
				}
			},
			//Private rest caller method used to make rest calls for table operations
			_restCaller: function(endpoint,method,requestBody){
				var request = new sn_ws.RESTMessageV2();
				request.setEndpoint(endpoint);
				request.setHttpMethod(method);
				var user = this._snow_user_id;
				var password = 'root';
				gs.info(user+'::'+password);
				request.setBasicAuth(user,password);
				request.setRequestHeader("Accept","application/json");
				request.setRequestHeader('Content-Type','application/json');
				if(requestBody != ''){
					request.setRequestBody(requestBody);
				}
				gs.debug(request.getRequestBody());
				var response = request.execute();
				gs.debug(response.getStatusCode());
				gs.debug(response.getErrorCode());
				gs.debug(response.getErrorMessage());
				gs.debug(response.getBody());
				return response.getBody();
			},
			_createObj: function(value){
				this.text = value;
			},
			_printObj:function(obj){
				var result='';
				for(var key in obj){
					result=result+','+key+'::'+obj[key];
				}
				gs.info(result);
			},
			
			type: 'SlackAppHelper'
		};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>kvallams</sys_created_by>
        <sys_created_on>2017-02-20 04:29:52</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>0fd9f261dbcd3200378fd450cf96194d</sys_id>
        <sys_mod_count>78</sys_mod_count>
        <sys_name>SlackAppHelper</sys_name>
        <sys_package display_value="Slack App" source="x_12684_slack_app">3482f625db8d3200378fd450cf9619a0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Slack App">3482f625db8d3200378fd450cf9619a0</sys_scope>
        <sys_update_name>sys_script_include_0fd9f261dbcd3200378fd450cf96194d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-06-19 00:37:43</sys_updated_on>
    </sys_script_include>
</record_update>
